// #include "print_funcs.h"

/* font.c
 *
 * bitmap font data 
 * designed by Henrik Theiling for Liquid Rendering, 2009
 * 
 *
 * adapted for aleph project by monome 2012
*/

// ordering is column-first for easier variable spacing
/* (0,0) = top left
 * pixel(x,y) = (bool)(font_data[x].data & (1 << y)) */

//#include "compiler.h"
// #include "types.h"
#include "font.h"

// #include "fonts/ume_tgo5_18.h"

// maxiumum string size to attempt rendering
#define MAX_RENDER_STRING 32

// glyph table to use 

/// FIXME: implement this, it would be a little faster
// column-first buffer indexing
// #define COL_FIRST

// glyph.last is the inset from right hand edge of glyph box...
const glyph_t font_data[] = {
  { /* 0x00020UL, 0, 2UL, */ 2, 3, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // ␣
  { /* 0x00021UL, 0, 2UL, */ 3, 4, { 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00 } },  // !
  { /* 0x00022UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x04, 0x02, 0x04, 0x02, 0x00 } },  // "
  { /* 0x00023UL, 0, 2UL, */ 1, 2, { 0x00, 0x14, 0x3e, 0x14, 0x3e, 0x14, 0x00 } },  // #
  { /* 0x00024UL, 0, 2UL, */ 1, 2, { 0x00, 0x24, 0x2a, 0x3e, 0x2a, 0x12, 0x00 } },  // $
  { /* 0x00025UL, 0, 2UL, */ 2, 3, { 0x00, 0x00, 0x32, 0x08, 0x26, 0x00, 0x00 } },  // %
  { /* 0x00026UL, 0, 2UL, */ 2, 3, { 0x00, 0x00, 0x14, 0x2a, 0x34, 0x00, 0x00 } },  // &
  { /* 0x00027UL, 0, 2UL, */ 3, 4, { 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00 } },  // '
  { /* 0x00028UL, 0, 2UL, */ 3, 3, { 0x00, 0x00, 0x00, 0x1c, 0x22, 0x00, 0x00 } },  // (
  { /* 0x00029UL, 0, 2UL, */ 3, 3, { 0x00, 0x00, 0x00, 0x22, 0x1c, 0x00, 0x00 } },  // )
  { /* 0x0002aUL, 0, 2UL, */ 2, 3, { 0x00, 0x00, 0x04, 0x0e, 0x04, 0x00, 0x00 } },  // *
  { /* 0x0002bUL, 0, 2UL, */ 2, 3, { 0x00, 0x00, 0x04, 0x0e, 0x04, 0x00, 0x00 } },  // +
  { /* 0x0002cUL, 0, 2UL, */ 3, 4, { 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00 } },  // ,
  { /* 0x0002dUL, 0, 2UL, */ 2, 3, { 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00 } },  // -
  { /* 0x0002eUL, 0, 2UL, */ 3, 4, { 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00 } },  // .
  { /* 0x0002fUL, 0, 2UL, */ 2, 3, { 0x00, 0x00, 0x30, 0x08, 0x06, 0x00, 0x00 } },  // /
  { /* 0x00030UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x1c, 0x22, 0x22, 0x1c, 0x00 } },  // 0
  { /* 0x00031UL, 0, 2UL, */ 2, 3, { 0x00, 0x00, 0x24, 0x3e, 0x20, 0x00, 0x00 } },  // 1
  { /* 0x00032UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x32, 0x2a, 0x2a, 0x24, 0x00 } },  // 2
  { /* 0x00033UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x22, 0x2a, 0x2a, 0x14, 0x00 } },  // 3
  { /* 0x00034UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x0e, 0x08, 0x08, 0x3e, 0x00 } },  // 4
  { /* 0x00035UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x2e, 0x2a, 0x2a, 0x12, 0x00 } },  // 5
  { /* 0x00036UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x1c, 0x2a, 0x2a, 0x12, 0x00 } },  // 6
  { /* 0x00037UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x02, 0x32, 0x0a, 0x06, 0x00 } },  // 7
  { /* 0x00038UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x14, 0x2a, 0x2a, 0x14, 0x00 } },  // 8
  { /* 0x00039UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x04, 0x2a, 0x2a, 0x1c, 0x00 } },  // 9
  { /* 0x0003aUL, 0, 2UL, */ 3, 4, { 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00 } },  // :
  { /* 0x0003bUL, 0, 2UL, */ 3, 4, { 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00 } },  // ;
  { /* 0x0003cUL, 0, 2UL, */ 2, 3, { 0x00, 0x00, 0x04, 0x0a, 0x0a, 0x00, 0x00 } },  // <
  { /* 0x0003dUL, 0, 2UL, */ 2, 3, { 0x00, 0x00, 0x0a, 0x0a, 0x0a, 0x00, 0x00 } },  // =
  { /* 0x0003eUL, 0, 2UL, */ 2, 3, { 0x00, 0x00, 0x0a, 0x0a, 0x04, 0x00, 0x00 } },  // >
  { /* 0x0003fUL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x02, 0x2a, 0x0a, 0x04, 0x00 } },  // ?
  { /* 0x00040UL, 0, 2UL, */ 1, 2, { 0x00, 0x10, 0x2a, 0x3a, 0x22, 0x1c, 0x00 } },  // @
  { /* 0x00041UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x3c, 0x12, 0x12, 0x3c, 0x00 } },  // A
  { /* 0x00042UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x3e, 0x2a, 0x2a, 0x14, 0x00 } },  // B
  { /* 0x00043UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x1c, 0x22, 0x22, 0x14, 0x00 } },  // C
  { /* 0x00044UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x3e, 0x22, 0x22, 0x1c, 0x00 } },  // D
  { /* 0x00045UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x3e, 0x2a, 0x2a, 0x22, 0x00 } },  // E
  { /* 0x00046UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x3e, 0x0a, 0x0a, 0x02, 0x00 } },  // F
  { /* 0x00047UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x1c, 0x22, 0x2a, 0x1a, 0x00 } },  // G
  { /* 0x00048UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x3e, 0x08, 0x08, 0x3e, 0x00 } },  // H
  { /* 0x00049UL, 0, 2UL, */ 3, 4, { 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00 } },  // I
  { /* 0x0004aUL, 0, 2UL, */ 2, 3, { 0x00, 0x00, 0x30, 0x20, 0x1e, 0x00, 0x00 } },  // J
  { /* 0x0004bUL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x3e, 0x08, 0x08, 0x36, 0x00 } },  // K
  { /* 0x0004cUL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x3e, 0x20, 0x20, 0x20, 0x00 } },  // L
  { /* 0x0004dUL, 0, 2UL, */ 1, 2, { 0x00, 0x3e, 0x04, 0x08, 0x04, 0x3e, 0x00 } },  // M
  { /* 0x0004eUL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x3e, 0x04, 0x08, 0x3e, 0x00 } },  // N
  { /* 0x0004fUL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x1c, 0x22, 0x22, 0x1c, 0x00 } },  // O
  { /* 0x00050UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x3e, 0x12, 0x12, 0x0c, 0x00 } },  // P
  { /* 0x00051UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x1c, 0x22, 0x32, 0x3c, 0x00 } },  // Q
  { /* 0x00052UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x3e, 0x0a, 0x0a, 0x34, 0x00 } },  // R
  { /* 0x00053UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x24, 0x2a, 0x2a, 0x12, 0x00 } },  // S
  { /* 0x00054UL, 0, 2UL, */ 2, 3, { 0x00, 0x00, 0x02, 0x3e, 0x02, 0x00, 0x00 } },  // T
  { /* 0x00055UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x1e, 0x20, 0x20, 0x1e, 0x00 } },  // U
  { /* 0x00056UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x1e, 0x20, 0x10, 0x0e, 0x00 } },  // V
  { /* 0x00057UL, 0, 2UL, */ 1, 2, { 0x00, 0x3e, 0x10, 0x08, 0x10, 0x3e, 0x00 } },  // W
  { /* 0x00058UL, 0, 2UL, */ 1, 2, { 0x00, 0x22, 0x14, 0x08, 0x14, 0x22, 0x00 } },  // X
  { /* 0x00059UL, 0, 2UL, */ 1, 2, { 0x00, 0x06, 0x08, 0x30, 0x08, 0x06, 0x00 } },  // Y
  { /* 0x0005aUL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x32, 0x2a, 0x2a, 0x26, 0x00 } },  // Z
  { /* 0x0005bUL, 0, 2UL, */ 3, 3, { 0x00, 0x00, 0x00, 0x3e, 0x22, 0x00, 0x00 } },  // [
  { /* 0x0005cUL, 0, 2UL, */ 2, 3, { 0x00, 0x00, 0x06, 0x08, 0x30, 0x00, 0x00 } },  // '\'
  { /* 0x0005dUL, 0, 2UL, */ 3, 3, { 0x00, 0x00, 0x00, 0x22, 0x3e, 0x00, 0x00 } },  // ]
  { /* 0x0005eUL, 0, 2UL, */ 2, 3, { 0x00, 0x00, 0x04, 0x02, 0x04, 0x00, 0x00 } },  // ^
  { /* 0x0005fUL, 0, 2UL, */ 2, 3, { 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00 } },  // _
  { /* 0x00060UL, 0, 2UL, */ 3, 4, { 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00 } },  // `
  { /* 0x00061UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x3c, 0x12, 0x12, 0x3c, 0x00 } },  // a
  { /* 0x00062UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x3e, 0x2a, 0x2a, 0x14, 0x00 } },  // b
  { /* 0x00063UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x1c, 0x22, 0x22, 0x14, 0x00 } },  // c
  { /* 0x00064UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x3e, 0x22, 0x22, 0x1c, 0x00 } },  // d
  { /* 0x00065UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x3e, 0x2a, 0x2a, 0x22, 0x00 } },  // e
  { /* 0x00066UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x3e, 0x0a, 0x0a, 0x02, 0x00 } },  // f
  { /* 0x00067UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x1c, 0x22, 0x2a, 0x1a, 0x00 } },  // g
  { /* 0x00068UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x3e, 0x08, 0x08, 0x3e, 0x00 } },  // h
  { /* 0x00069UL, 0, 2UL, */ 3, 4, { 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00 } },  // i
  { /* 0x0006aUL, 0, 2UL, */ 2, 3, { 0x00, 0x00, 0x30, 0x20, 0x1e, 0x00, 0x00 } },  // j
  { /* 0x0006bUL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x3e, 0x08, 0x08, 0x36, 0x00 } },  // k
  { /* 0x0006cUL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x3e, 0x20, 0x20, 0x20, 0x00 } },  // l
  { /* 0x0006dUL, 0, 2UL, */ 1, 2, { 0x00, 0x3e, 0x04, 0x08, 0x04, 0x3e, 0x00 } },  // m
  { /* 0x0006eUL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x3e, 0x04, 0x08, 0x3e, 0x00 } },  // n
  { /* 0x0006fUL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x1c, 0x22, 0x22, 0x1c, 0x00 } },  // o
  { /* 0x00070UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x3e, 0x12, 0x12, 0x0c, 0x00 } },  // p
  { /* 0x00071UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x1c, 0x22, 0x32, 0x3c, 0x00 } },  // q
  { /* 0x00072UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x3e, 0x0a, 0x0a, 0x34, 0x00 } },  // r
  { /* 0x00073UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x24, 0x2a, 0x2a, 0x12, 0x00 } },  // s
  { /* 0x00074UL, 0, 2UL, */ 2, 3, { 0x00, 0x00, 0x02, 0x3e, 0x02, 0x00, 0x00 } },  // t
  { /* 0x00075UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x1e, 0x20, 0x20, 0x1e, 0x00 } },  // u
  { /* 0x00076UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x1e, 0x20, 0x10, 0x0e, 0x00 } },  // v
  { /* 0x00077UL, 0, 2UL, */ 1, 2, { 0x00, 0x1e, 0x20, 0x18, 0x20, 0x1e, 0x00 } },  // w
  { /* 0x00078UL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x36, 0x08, 0x08, 0x36, 0x00 } },  // x
  { /* 0x00079UL, 0, 2UL, */ 1, 2, { 0x00, 0x02, 0x04, 0x38, 0x04, 0x02, 0x00 } },  // y
  { /* 0x0007aUL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x32, 0x2a, 0x2a, 0x26, 0x00 } },  // z
  { /* 0x0007bUL, 0, 2UL, */ 2, 3, { 0x00, 0x00, 0x08, 0x3e, 0x22, 0x00, 0x00 } },  // {
  { /* 0x0007cUL, 0, 2UL, */ 3, 4, { 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00 } },  // |
  { /* 0x0007dUL, 0, 2UL, */ 2, 3, { 0x00, 0x00, 0x22, 0x3e, 0x08, 0x00, 0x00 } },  // }
  { /* 0x0007eUL, 0, 2UL, */ 2, 2, { 0x00, 0x00, 0x06, 0x02, 0x04, 0x06, 0x00 } },  // ~
  { /* 0x0007fUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // ⌫
};

const uint32_t font_nglyphs = sizeof(font_data)/sizeof(glyph_t) - 1;

const glyph2_t font2_data[] = {
{ /* 0x00020UL, 0, 2UL, */ 2, 3, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // ␣
  { /* 0x00021UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // !
  { /* 0x00022UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // "
  { /* 0x00023UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // #
  { /* 0x00024UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // $
  { /* 0x00025UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // %
  { /* 0x00026UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // &
  { /* 0x00027UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // '
  { /* 0x00028UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // (
  { /* 0x00029UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // )
  { /* 0x0002aUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // *
  { /* 0x0002bUL, 0, 2UL, */ 1, 3, { 0x00, 0x40, 0x40, 0x1f0, 0x40, 0x40, 0x00, 0x00 } },  // +
  { /* 0x0002cUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // ,
  { /* 0x0002dUL, 0, 2UL, */ 2, 3, { 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00 } },  // -
  { /* 0x0002eUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // .
  { /* 0x0002fUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // /
  { /* 0x00030UL, 0, 2UL, */ 1, 3, { 0x00, 0x7fc, 0x802, 0x802, 0x802, 0x7fc, 0x00, 0x00 } },  // 0
  { /* 0x00031UL, 0, 2UL, */ 2, 5, { 0x00, 0x00, 0x04, 0xffe, 0x00, 0x00, 0x00, 0x00 } },  // 1
  { /* 0x00032UL, 0, 2UL, */ 1, 3, { 0x00, 0xc1c, 0xb02, 0x882, 0x862, 0x81c, 0x00, 0x00 } },  // 2
  { /* 0x00033UL, 0, 2UL, */ 1, 3, { 0x00, 0x60c, 0x842, 0x842, 0x842, 0x7bc, 0x00, 0x00 } },  // 3
  { /* 0x00034UL, 0, 2UL, */ 1, 2, { 0x00, 0x100, 0x1c0, 0x130, 0x10c, 0xffe, 0x100, 0x00 } },  // 4
  { /* 0x00035UL, 0, 2UL, */ 1, 3, { 0x00, 0x63e, 0x822, 0x822, 0x822, 0x7c2, 0x00, 0x00 } },  // 5
  { /* 0x00036UL, 0, 2UL, */ 1, 3, { 0x00, 0x7fc, 0x822, 0x822, 0x822, 0x7cc, 0x00, 0x00 } },  // 6
  { /* 0x00037UL, 0, 2UL, */ 1, 3, { 0x00, 0x02, 0x02, 0xf02, 0xf2, 0x0e, 0x00, 0x00 } },  // 7
  { /* 0x00038UL, 0, 2UL, */ 1, 3, { 0x00, 0x7bc, 0x842, 0x842, 0x842, 0x7bc, 0x00, 0x00 } },  // 8
  { /* 0x00039UL, 0, 2UL, */ 1, 3, { 0x00, 0x67c, 0x882, 0x882, 0x882, 0x7fc, 0x00, 0x00 } },  // 9
  { /* 0x0003aUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // :
  { /* 0x0003bUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // ;
  { /* 0x0003cUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // <
  { /* 0x0003dUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // =
  { /* 0x0003eUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // >
  { /* 0x0003fUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // ?
  { /* 0x00040UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // @
  { /* 0x00041UL, 0, 2UL, */ 1, 3, { 0x00, 0xfc0, 0x138, 0x106, 0x138, 0xfc0, 0x00, 0x00 } },  // A
  { /* 0x00042UL, 0, 2UL, */ 1, 3, { 0x00, 0xffe, 0x842, 0x842, 0x842, 0x7bc, 0x00, 0x00 } },  // B
  { /* 0x00043UL, 0, 2UL, */ 1, 3, { 0x00, 0x7fc, 0x802, 0x802, 0x802, 0x60c, 0x00, 0x00 } },  // C
  { /* 0x00044UL, 0, 2UL, */ 1, 3, { 0x00, 0xffe, 0x802, 0x802, 0x404, 0x3f8, 0x00, 0x00 } },  // D
  { /* 0x00045UL, 0, 2UL, */ 1, 3, { 0x00, 0xffe, 0x842, 0x842, 0x842, 0x802, 0x00, 0x00 } },  // E
  { /* 0x00046UL, 0, 2UL, */ 1, 3, { 0x00, 0xffe, 0x42, 0x42, 0x42, 0x02, 0x00, 0x00 } },  // F
  { /* 0x00047UL, 0, 2UL, */ 1, 3, { 0x00, 0x7fc, 0x802, 0x802, 0x882, 0x784, 0x00, 0x00 } },  // G
  { /* 0x00048UL, 0, 2UL, */ 1, 3, { 0x00, 0xffe, 0x40, 0x40, 0x40, 0xffe, 0x00, 0x00 } },  // H
  { /* 0x00049UL, 0, 2UL, */ 3, 5, { 0x00, 0x00, 0x00, 0xffe, 0x00, 0x00, 0x00, 0x00 } },  // I
  { /* 0x0004aUL, 0, 2UL, */ 1, 3, { 0x00, 0x600, 0x800, 0x800, 0x800, 0x7fe, 0x00, 0x00 } },  // J
  { /* 0x0004bUL, 0, 2UL, */ 1, 3, { 0x00, 0xffe, 0x80, 0xe0, 0x198, 0xe06, 0x00, 0x00 } },  // K
  { /* 0x0004cUL, 0, 2UL, */ 1, 3, { 0x00, 0xffe, 0x800, 0x800, 0x800, 0x800, 0x00, 0x00 } },  // L
  { /* 0x0004dUL, 0, 2UL, */ 1, 3, { 0x00, 0xffe, 0x18, 0xe0, 0x18, 0xffe, 0x00, 0x00 } },  // M
  { /* 0x0004eUL, 0, 2UL, */ 1, 3, { 0x00, 0xffe, 0x18, 0x60, 0x180, 0xffe, 0x00, 0x00 } },  // N
  { /* 0x0004fUL, 0, 2UL, */ 1, 3, { 0x00, 0x7fc, 0x802, 0x802, 0x802, 0x7fc, 0x00, 0x00 } },  // O
  { /* 0x00050UL, 0, 2UL, */ 1, 3, { 0x00, 0xffe, 0x42, 0x42, 0x42, 0x3c, 0x00, 0x00 } },  // P
  { /* 0x00051UL, 0, 2UL, */ 1, 2, { 0x00, 0x7fc, 0x802, 0x902, 0xa02, 0xffc, 0x800, 0x00 } },  // Q
  { /* 0x00052UL, 0, 2UL, */ 1, 3, { 0x00, 0xffe, 0x42, 0x42, 0x1c2, 0xe3c, 0x00, 0x00 } },  // R
  { /* 0x00053UL, 0, 2UL, */ 1, 3, { 0x00, 0x71c, 0x822, 0x842, 0x882, 0x70c, 0x00, 0x00 } },  // S
  { /* 0x00054UL, 0, 2UL, */ 1, 3, { 0x00, 0x02, 0x02, 0xffe, 0x02, 0x02, 0x00, 0x00 } },  // T
  { /* 0x00055UL, 0, 2UL, */ 1, 3, { 0x00, 0x7fe, 0x800, 0x800, 0x800, 0x7fe, 0x00, 0x00 } },  // U
  { /* 0x00056UL, 0, 2UL, */ 1, 3, { 0x00, 0x1e, 0x1e0, 0xe00, 0x1e0, 0x1e, 0x00, 0x00 } },  // V
  { /* 0x00057UL, 0, 2UL, */ 1, 3, { 0x00, 0xffe, 0x300, 0xe0, 0x300, 0xffe, 0x00, 0x00 } },  // W
  { /* 0x00058UL, 0, 2UL, */ 1, 3, { 0x00, 0xe06, 0x198, 0x60, 0x198, 0xe06, 0x00, 0x00 } },  // X
  { /* 0x00059UL, 0, 2UL, */ 1, 3, { 0x00, 0x0e, 0x30, 0xfc0, 0x30, 0x0e, 0x00, 0x00 } },  // Y
  { /* 0x0005aUL, 0, 2UL, */ 1, 3, { 0x00, 0xc02, 0xb02, 0x8e2, 0x81a, 0x806, 0x00, 0x00 } },  // Z
  { /* 0x0005bUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // [
  { /* 0x0005cUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  //
  { /* 0x0005dUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // ]
  { /* 0x0005eUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // ^
  { /* 0x0005fUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // _
  { /* 0x00060UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // `
  { /* 0x00061UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // a
  { /* 0x00062UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // b
  { /* 0x00063UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // c
  { /* 0x00064UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // d
  { /* 0x00065UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // e
  { /* 0x00066UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // f
  { /* 0x00067UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // g
  { /* 0x00068UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // h
  { /* 0x00069UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // i
  { /* 0x0006aUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // j
  { /* 0x0006bUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // k
  { /* 0x0006cUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // l
  { /* 0x0006dUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // m
  { /* 0x0006eUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // n
  { /* 0x0006fUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // o
  { /* 0x00070UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // p
  { /* 0x00071UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // q
  { /* 0x00072UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // r
  { /* 0x00073UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // s
  { /* 0x00074UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // t
  { /* 0x00075UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // u
  { /* 0x00076UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // v
  { /* 0x00077UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // w
  { /* 0x00078UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // x
  { /* 0x00079UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // y
  { /* 0x0007aUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // z
  { /* 0x0007bUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // {
  { /* 0x0007cUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // |
  { /* 0x0007dUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // }
  { /* 0x0007eUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // ~
  { /* 0x0007fUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } }
};
// Добавляем данные для второго шрифта
// const glyph2_t font2_data[] = {
//   { /* 0x00020UL, 0, 2UL, */ 4, 4, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // ␣
//   { /* 0x00021UL, 0, 2UL, */ 5, 6, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x39ff, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // !
//   { /* 0x00022UL, 0, 2UL, */ 3, 4, { 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00 } },  // "
//   { /* 0x00023UL, 0, 2UL, */ 1, 2, { 0x00, 0x210, 0x210, 0x3fff, 0x210, 0x210, 0x210, 0x3fff, 0x210, 0x210, 0x00 } },  // #
//   { /* 0x00024UL, 0, 2UL, */ 1, 2, { 0x00, 0x838, 0x1044, 0x2082, 0x2082, 0x3fff, 0x2082, 0x2082, 0x1104, 0xe08, 0x00 } },  // $
//   { /* 0x00025UL, 0, 2UL, */ 1, 2, { 0x00, 0x06, 0x3009, 0xc09, 0x306, 0xc0, 0x1830, 0x240c, 0x2403, 0x1800, 0x00 } },  // %
//   { /* 0x00026UL, 0, 2UL, */ 1, 2, { 0x00, 0xf00, 0x108e, 0x2051, 0x2021, 0x2061, 0x2091, 0x110e, 0xe00, 0x3180, 0x00 } },  // &
//   { /* 0x00027UL, 0, 2UL, */ 5, 6, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // '
//   { /* 0x00028UL, 0, 2UL, */ 3, 5, { 0x00, 0x00, 0x00, 0x3f0, 0xc0c, 0x1002, 0x2001, 0x00, 0x00, 0x00, 0x00 } },  // (
//   { /* 0x00029UL, 0, 2UL, */ 3, 5, { 0x00, 0x00, 0x00, 0x2001, 0x1002, 0xc0c, 0x3f0, 0x00, 0x00, 0x00, 0x00 } },  // )
//   { /* 0x0002aUL, 0, 2UL, */ 1, 2, { 0x00, 0x80, 0x888, 0x490, 0x2a0, 0x1c0, 0x2a0, 0x490, 0x888, 0x80, 0x00 } },  // *
//   { /* 0x0002bUL, 0, 2UL, */ 1, 2, { 0x00, 0x80, 0x80, 0x80, 0x80, 0xff8, 0x80, 0x80, 0x80, 0x80, 0x00 } },  // +
//   { /* 0x0002cUL, 0, 2UL, */ 5, 6, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // ,
//   { /* 0x0002dUL, 0, 2UL, */ 1, 3, { 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00 } },  // -
//   { /* 0x0002eUL, 0, 2UL, */ 5, 6, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x3800, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // .
//   { /* 0x0002fUL, 0, 2UL, */ 2, 3, { 0x00, 0x00, 0x3000, 0xc00, 0x300, 0xc0, 0x30, 0x0c, 0x03, 0x00, 0x00 } },  // /
//   { /* 0x00030UL, 0, 2UL, */ 1, 3, { 0x00, 0xffc, 0x1202, 0x2101, 0x2081, 0x2041, 0x2021, 0x1012, 0xffc, 0x00, 0x00 } },  // 0
//   { /* 0x00031UL, 0, 2UL, */ 2, 3, { 0x00, 0x00, 0x2008, 0x2004, 0x2002, 0x3fff, 0x2000, 0x2000, 0x2000, 0x00, 0x00 } },  // 1
//   { /* 0x00032UL, 0, 2UL, */ 1, 3, { 0x00, 0x301c, 0x2802, 0x2401, 0x2201, 0x2101, 0x2081, 0x2042, 0x203c, 0x00, 0x00 } },  // 2
//   { /* 0x00033UL, 0, 2UL, */ 1, 3, { 0x00, 0x804, 0x1002, 0x2041, 0x2041, 0x2041, 0x2041, 0x10a2, 0xf1c, 0x00, 0x00 } },  // 3
//   { /* 0x00034UL, 0, 2UL, */ 1, 3, { 0x00, 0x780, 0x440, 0x420, 0x410, 0x408, 0x404, 0x402, 0x3fff, 0x00, 0x00 } },  // 4
//   { /* 0x00035UL, 0, 2UL, */ 1, 3, { 0x00, 0xc3f, 0x1021, 0x2021, 0x2021, 0x2021, 0x2021, 0x1041, 0xf81, 0x00, 0x00 } },  // 5
//   { /* 0x00036UL, 0, 2UL, */ 1, 3, { 0x00, 0xffc, 0x1022, 0x2021, 0x2021, 0x2021, 0x2021, 0x1041, 0xf80, 0x00, 0x00 } },  // 6
//   { /* 0x00037UL, 0, 2UL, */ 1, 3, { 0x00, 0x07, 0x01, 0x01, 0x3c01, 0x301, 0xc1, 0x31, 0x0f, 0x00, 0x00 } },  // 7
//   { /* 0x00038UL, 0, 2UL, */ 1, 3, { 0x00, 0xf1c, 0x10a2, 0x2041, 0x2041, 0x2041, 0x2041, 0x10a2, 0xf1c, 0x00, 0x00 } },  // 8
//   { /* 0x00039UL, 0, 2UL, */ 1, 3, { 0x00, 0x7c, 0x2082, 0x2101, 0x2101, 0x2101, 0x2101, 0x1102, 0xffc, 0x00, 0x00 } },  // 9
//   { /* 0x0003aUL, 0, 2UL, */ 5, 6, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c38, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // :
//   { /* 0x0003bUL, 0, 2UL, */ 5, 6, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c38, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // ;
//   { /* 0x0003cUL, 0, 2UL, */ 2, 3, { 0x00, 0x00, 0xc0, 0x120, 0x210, 0x408, 0x804, 0x1002, 0x2001, 0x00, 0x00 } },  // <
//   { /* 0x0003dUL, 0, 2UL, */ 1, 3, { 0x00, 0x210, 0x210, 0x210, 0x210, 0x210, 0x210, 0x210, 0x210, 0x00, 0x00 } },  // =
//   { /* 0x0003eUL, 0, 2UL, */ 2, 3, { 0x00, 0x00, 0x2001, 0x1002, 0x804, 0x408, 0x210, 0x120, 0xc0, 0x00, 0x00 } },  // >
//   { /* 0x0003fUL, 0, 2UL, */ 1, 3, { 0x00, 0x0c, 0x02, 0x01, 0x01, 0x3981, 0x41, 0x22, 0x1c, 0x00, 0x00 } },  // ?
//   { /* 0x00040UL, 0, 2UL, */ 1, 2, { 0x00, 0xffc, 0x1002, 0x2001, 0x21e1, 0x2211, 0x2409, 0x2409, 0x240a, 0x27fc, 0x00 } },  // @
//   { /* 0x00041UL, 0, 2UL, */ 1, 3, { 0x00, 0x3ffc, 0x82, 0x81, 0x81, 0x81, 0x81, 0x82, 0x3ffc, 0x00, 0x00 } },  // A
//   { /* 0x00042UL, 0, 2UL, */ 1, 3, { 0x00, 0x3fff, 0x2041, 0x2041, 0x2041, 0x2041, 0x2041, 0x10a2, 0xf1c, 0x00, 0x00 } },  // B
//   { /* 0x00043UL, 0, 2UL, */ 1, 3, { 0x00, 0xffc, 0x1002, 0x2001, 0x2001, 0x2001, 0x2001, 0x1002, 0xc0c, 0x00, 0x00 } },  // C
//   { /* 0x00044UL, 0, 2UL, */ 1, 3, { 0x00, 0x3fff, 0x2001, 0x2001, 0x2001, 0x2001, 0x2001, 0x1002, 0xffc, 0x00, 0x00 } },  // D
//   { /* 0x00045UL, 0, 2UL, */ 1, 3, { 0x00, 0x3fff, 0x2041, 0x2041, 0x2041, 0x2041, 0x2041, 0x2001, 0x2001, 0x00, 0x00 } },  // E
//   { /* 0x00046UL, 0, 2UL, */ 1, 3, { 0x00, 0x3fff, 0x41, 0x41, 0x41, 0x41, 0x41, 0x01, 0x01, 0x00, 0x00 } },  // F
//   { /* 0x00047UL, 0, 2UL, */ 1, 3, { 0x00, 0xffc, 0x1002, 0x2001, 0x2001, 0x2081, 0x2081, 0x1082, 0xf8c, 0x00, 0x00 } },  // G
//   { /* 0x00048UL, 0, 2UL, */ 1, 3, { 0x00, 0x3fff, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3fff, 0x00, 0x00 } },  // H
//   { /* 0x00049UL, 0, 2UL, */ 3, 4, { 0x00, 0x00, 0x00, 0x2001, 0x2001, 0x3fff, 0x2001, 0x2001, 0x00, 0x00, 0x00 } },  // I
//   { /* 0x0004aUL, 0, 2UL, */ 1, 2, { 0x00, 0xe00, 0x1000, 0x2000, 0x2000, 0x2001, 0x1001, 0xfff, 0x01, 0x01, 0x00 } },  // J
//   { /* 0x0004bUL, 0, 2UL, */ 1, 3, { 0x00, 0x3fff, 0xc0, 0x120, 0x210, 0x408, 0x804, 0x1002, 0x2001, 0x00, 0x00 } },  // K
//   { /* 0x0004cUL, 0, 2UL, */ 1, 3, { 0x00, 0x3fff, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x00, 0x00 } },  // L
//   { /* 0x0004dUL, 0, 2UL, */ 1, 2, { 0x00, 0x3fff, 0x02, 0x0c, 0x10, 0x60, 0x10, 0x0c, 0x02, 0x3fff, 0x00 } },  // M
//   { /* 0x0004eUL, 0, 2UL, */ 1, 3, { 0x00, 0x3fff, 0x10, 0x20, 0x40, 0x80, 0x100, 0x200, 0x3fff, 0x00, 0x00 } },  // N
//   { /* 0x0004fUL, 0, 2UL, */ 1, 3, { 0x00, 0xffc, 0x1002, 0x2001, 0x2001, 0x2001, 0x2001, 0x1002, 0xffc, 0x00, 0x00 } },  // O
//   { /* 0x00050UL, 0, 2UL, */ 1, 3, { 0x00, 0x3fff, 0x81, 0x81, 0x81, 0x81, 0x81, 0x42, 0x3c, 0x00, 0x00 } },  // P
//   { /* 0x00051UL, 0, 2UL, */ 1, 3, { 0x00, 0xffc, 0x1002, 0x2001, 0x2801, 0x3001, 0x2001, 0x1002, 0xffc, 0x00, 0x00 } },  // Q
//   { /* 0x00052UL, 0, 2UL, */ 1, 3, { 0x00, 0x3fff, 0x81, 0x181, 0x281, 0x481, 0x881, 0x1042, 0x203c, 0x00, 0x00 } },  // R
//   { /* 0x00053UL, 0, 2UL, */ 1, 3, { 0x00, 0x81c, 0x1022, 0x2041, 0x2041, 0x2041, 0x2041, 0x1082, 0xf04, 0x00, 0x00 } },  // S
//   { /* 0x00054UL, 0, 2UL, */ 1, 2, { 0x00, 0x01, 0x01, 0x01, 0x01, 0x3fff, 0x01, 0x01, 0x01, 0x01, 0x00 } },  // T
//   { /* 0x00055UL, 0, 2UL, */ 1, 3, { 0x00, 0xfff, 0x1000, 0x2000, 0x2000, 0x2000, 0x2000, 0x1000, 0xfff, 0x00, 0x00 } },  // U
//   { /* 0x00056UL, 0, 2UL, */ 1, 3, { 0x00, 0x1f, 0x1e0, 0xe00, 0x3000, 0x3000, 0xe00, 0x1e0, 0x1f, 0x00, 0x00 } },  // V
//   { /* 0x00057UL, 0, 2UL, */ 1, 2, { 0x00, 0x3fff, 0x1000, 0xc00, 0x200, 0x180, 0x200, 0xc00, 0x1000, 0x3fff, 0x00 } },  // W
//   { /* 0x00058UL, 0, 2UL, */ 1, 3, { 0x00, 0x3003, 0xc0c, 0x330, 0xc0, 0xc0, 0x330, 0xc0c, 0x3003, 0x00, 0x00 } },  // X
//   { /* 0x00059UL, 0, 2UL, */ 1, 2, { 0x00, 0x03, 0x0c, 0x30, 0xc0, 0x3f00, 0xc0, 0x30, 0x0c, 0x03, 0x00 } },  // Y
//   { /* 0x0005aUL, 0, 2UL, */ 1, 3, { 0x00, 0x3c01, 0x2201, 0x2101, 0x2081, 0x2041, 0x2021, 0x2011, 0x200f, 0x00, 0x00 } },  // Z
//   { /* 0x0005bUL, 0, 2UL, */ 3, 5, { 0x00, 0x00, 0x00, 0x3fff, 0x2001, 0x2001, 0x2001, 0x00, 0x00, 0x00, 0x00 } },  // [
//   { /* 0x0005cUL, 0, 2UL, */ 2, 3, { 0x00, 0x00, 0x03, 0x0c, 0x30, 0xc0, 0x300, 0xc00, 0x3000, 0x00, 0x00 } },  //
//   { /* 0x0005dUL, 0, 2UL, */ 3, 5, { 0x00, 0x00, 0x00, 0x2001, 0x2001, 0x2001, 0x3fff, 0x00, 0x00, 0x00, 0x00 } },  // ]
//   { /* 0x0005eUL, 0, 2UL, */ 1, 2, { 0x00, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 } },  // ^
//   { /* 0x0005fUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // _
//   { /* 0x00060UL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // `
//   { /* 0x00061UL, 0, 2UL, */ 1, 3, { 0x00, 0x1e00, 0x2110, 0x2110, 0x2110, 0x2110, 0x2110, 0x2120, 0x3fc0, 0x00, 0x00 } },  // a
//   { /* 0x00062UL, 0, 2UL, */ 1, 3, { 0x00, 0x3fff, 0x2010, 0x2010, 0x2010, 0x2010, 0x2010, 0x1020, 0xfc0, 0x00, 0x00 } },  // b
//   { /* 0x00063UL, 0, 2UL, */ 1, 3, { 0x00, 0xfc0, 0x1020, 0x2010, 0x2010, 0x2010, 0x2010, 0x1020, 0x840, 0x00, 0x00 } },  // c
//   { /* 0x00064UL, 0, 2UL, */ 1, 3, { 0x00, 0xfc0, 0x1020, 0x2010, 0x2010, 0x2010, 0x2010, 0x2010, 0x3fff, 0x00, 0x00 } },  // d
//   { /* 0x00065UL, 0, 2UL, */ 1, 3, { 0x00, 0xfc0, 0x1120, 0x2110, 0x2110, 0x2110, 0x2110, 0x2120, 0x11c0, 0x00, 0x00 } },  // e
//   { /* 0x00066UL, 0, 2UL, */ 1, 3, { 0x00, 0x10, 0x10, 0x10, 0x3ffe, 0x11, 0x11, 0x11, 0x01, 0x00, 0x00 } },  // f
//   { /* 0x00067UL, 0, 2UL, */ 1, 3, { 0x00, 0xfc0, 0x1020, 0x2010, 0x2010, 0x2010, 0x2010, 0x2010, 0x3ff0, 0x00, 0x00 } },  // g
//   { /* 0x00068UL, 0, 2UL, */ 1, 3, { 0x00, 0x3fff, 0x10, 0x10, 0x10, 0x10, 0x10, 0x20, 0x3fc0, 0x00, 0x00 } },  // h
//   { /* 0x00069UL, 0, 2UL, */ 3, 4, { 0x00, 0x00, 0x00, 0x2010, 0x2010, 0x3ff7, 0x2000, 0x2000, 0x00, 0x00, 0x00 } },  // i
//   { /* 0x0006aUL, 0, 2UL, */ 5, 4, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x3ff7, 0x00, 0x00, 0x00 } },  // j
//   { /* 0x0006bUL, 0, 2UL, */ 2, 3, { 0x00, 0x00, 0x3fff, 0x300, 0x300, 0x480, 0x840, 0x1020, 0x2010, 0x00, 0x00 } },  // k
//   { /* 0x0006cUL, 0, 2UL, */ 3, 4, { 0x00, 0x00, 0x00, 0x2001, 0x2001, 0x3fff, 0x2000, 0x2000, 0x00, 0x00, 0x00 } },  // l
//   { /* 0x0006dUL, 0, 2UL, */ 1, 2, { 0x00, 0x3ff0, 0x10, 0x10, 0x10, 0x3ff0, 0x10, 0x10, 0x20, 0x3fc0, 0x00 } },  // m
//   { /* 0x0006eUL, 0, 2UL, */ 1, 3, { 0x00, 0x3ff0, 0x10, 0x10, 0x10, 0x10, 0x10, 0x20, 0x3fc0, 0x00, 0x00 } },  // n
//   { /* 0x0006fUL, 0, 2UL, */ 1, 3, { 0x00, 0xfc0, 0x1020, 0x2010, 0x2010, 0x2010, 0x2010, 0x1020, 0xfc0, 0x00, 0x00 } },  // o
//   { /* 0x00070UL, 0, 2UL, */ 1, 3, { 0x00, 0x3ff0, 0x2010, 0x2010, 0x2010, 0x2010, 0x2010, 0x1020, 0xfc0, 0x00, 0x00 } },  // p
//   { /* 0x00071UL, 0, 2UL, */ 1, 3, { 0x00, 0xfc0, 0x1020, 0x2010, 0x2010, 0x2010, 0x2010, 0x2010, 0x3ff0, 0x00, 0x00 } },  // q
//   { /* 0x00072UL, 0, 2UL, */ 1, 3, { 0x00, 0x3ff0, 0x40, 0x20, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00 } },  // r
//   { /* 0x00073UL, 0, 2UL, */ 1, 3, { 0x00, 0x10e0, 0x2110, 0x2110, 0x2110, 0x2110, 0x2110, 0x2110, 0x1e20, 0x00, 0x00 } },  // s
//   { /* 0x00074UL, 0, 2UL, */ 1, 3, { 0x00, 0x10, 0x10, 0x10, 0x1fff, 0x2010, 0x2010, 0x2010, 0x2000, 0x00, 0x00 } },  // t
//   { /* 0x00075UL, 0, 2UL, */ 1, 3, { 0x00, 0xff0, 0x1000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x3ff0, 0x00, 0x00 } },  // u
//   { /* 0x00076UL, 0, 2UL, */ 1, 3, { 0x00, 0x70, 0x380, 0xc00, 0x3000, 0x3000, 0xc00, 0x380, 0x70, 0x00, 0x00 } },  // v
//   { /* 0x00077UL, 0, 2UL, */ 1, 2, { 0x00, 0x1ff0, 0x2000, 0x2000, 0x2000, 0x3f80, 0x2000, 0x2000, 0x2000, 0x1ff0, 0x00 } },  // w
//   { /* 0x00078UL, 0, 2UL, */ 1, 3, { 0x00, 0x3030, 0x840, 0x480, 0x300, 0x300, 0x480, 0x840, 0x3030, 0x00, 0x00 } },  // x
//   { /* 0x00079UL, 0, 2UL, */ 1, 3, { 0x00, 0xff0, 0x1000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x3ff0, 0x00, 0x00 } },  // y
//   { /* 0x0007aUL, 0, 2UL, */ 1, 3, { 0x00, 0x3010, 0x2810, 0x2410, 0x2210, 0x2110, 0x2090, 0x2050, 0x2030, 0x00, 0x00 } },  // z
//   { /* 0x0007bUL, 0, 2UL, */ 2, 4, { 0x00, 0x00, 0x40, 0x40, 0xfbc, 0x1002, 0x2001, 0x2001, 0x00, 0x00, 0x00 } },  // {
//   { /* 0x0007cUL, 0, 2UL, */ 5, 6, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x3fff, 0x00, 0x00, 0x00, 0x00, 0x00 } },  // |
//   { /* 0x0007dUL, 0, 2UL, */ 2, 4, { 0x00, 0x00, 0x2001, 0x2001, 0x1002, 0xfbc, 0x40, 0x40, 0x00, 0x00, 0x00 } },  // }
//   { /* 0x0007eUL, 0, 2UL, */ 1, 3, { 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00 } },  // ~
//   { /* 0x0007fUL, 0, 2UL, */ 0, 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } }
// };

const uint32_t font2_nglyphs = sizeof(font2_data)/sizeof(glyph2_t) - 1;

//------------------------------------------
//-----  functions


// render single glyph to a flat buffer (1byte = 1px)
// given pointer to buffer, pixel offset, row length,
// foreground and background colors
// return columns used
extern uint8_t font_glyph(char ch, uint8_t* buf, uint8_t w, uint8_t a, uint8_t b) {
  uint8_t i=0;
  uint8_t j;
  uint8_t * p = buf;
  const glyph_t* gl = &(font_data[ch - FONT_ASCII_OFFSET]);

  // columns to draw
  uint8_t cols = FONT_CHARW - gl->first - gl->last;
  while(i < cols) {
    for(j=0; j<FONT_CHARH; j++) {
      *p = gl->data[i + gl->first] & (1 << j) ? a : b;
      //      if(*buf) { print_dbg("#"); } else { print_dbg("_"); }
      // point at next row
      p += w;
    }
    // increment column count
    i++;
    // reset pointer to row
    p = buf + i;
  }
  return cols;
}

// fixed_width variant
extern uint8_t font_glyph_fixed(char ch, uint8_t* buf, uint8_t w, uint8_t a, uint8_t b) {
  uint8_t i=0;
  uint8_t j;
  uint8_t * p = buf;
  const glyph_t* gl = &(font_data[ch - FONT_ASCII_OFFSET]);

  // columns to draw
  while(i < FONT_CHARW) {
    for(j=0; j<FONT_CHARH; j++) {
      *p = gl->data[i + gl->first] & (1 << j) ? a : b;
      // point at next row
      p += w;
    }
    // increment column count
    i++;
    // reset pointer to row
    p = buf + i;
  }
  return FONT_CHARW;
}

// same as font_glyph, double size
extern uint8_t* font_glyph_big(char ch, uint8_t* buf, uint8_t w, uint8_t a, uint8_t b) {
  uint8_t i=0, j, val;
  uint8_t* p = buf;
  const glyph_t* gl = &(font_data[ch - FONT_ASCII_OFFSET]);
  // columns to draw
  uint8_t cols = (FONT_CHARW - gl->first - gl->last);
  while(i < cols) {
    for(j=0; j<FONT_CHARH; j++) {
      val = gl->data[i + gl->first] & (1 << j) ? a : b;
      *p = val;
      *(p +1) = val;
      // point at next row
      p += w;
      // fill the next row as well
      *p = val;
      *(p +1) = val;
      // point at next row
      p += w;
    }
    // move pointer back the size of one column
    //    buf -= colOffset;
    // increment for next row
    //    buf += 2;
    // increment column count
    i++;
    // set pointer to next (pixel*2) in first row
    p = buf + (i*2);
  }
  return p;
}

// same as font_glyph,m 4x size
extern uint8_t* font_glyph_bigbig(char ch, uint8_t* buf, uint8_t w, uint8_t a, uint8_t b) {
  uint8_t i=0, j, val;
  uint8_t* p = buf;
  const glyph_t* gl = &(font_data[ch - FONT_ASCII_OFFSET]);
  // columns to draw
  uint8_t cols = (FONT_CHARW - gl->first - gl->last);
  while(i < cols) {
    for(j=0; j<FONT_CHARH; j++) {
      val = gl->data[i + gl->first] & (1 << j) ? a : b;
      *p = val;
      *(p +1) = val;
      *(p +2) = val;
      *(p +3) = val;
      // point at next row
      p += w;
      // fill the next row as well
      *p = val;
      *(p +1) = val;
      *(p +2) = val;
      *(p +3) = val;
      // point at next row
      p += w;
      // fill the next row as well
      *p = val;
      *(p +1) = val;
      *(p +2) = val;
      *(p +3) = val;
      // point at next row
      p += w;
      // fill the next row as well
      *p = val;
      *(p +1) = val;
      *(p +2) = val;
      *(p +3) = val;
      // point at next row
      p += w;
    }
    // move pointer back the size of one column
    //    buf -= colOffset;
    // increment for next row
    //    buf += 2;
    // increment column count
    i++;
    // set pointer to next (pixel*2) in first row
    p = buf + (i << 2);
  }
  return p;
}

uint8_t font2_glyph(char ch, uint8_t* buf, uint8_t w, uint8_t a, uint8_t b) {
    uint8_t i=0;
    uint8_t j;
    uint8_t * p = buf;
    const glyph2_t* gl = &(font2_data[ch - FONT2_ASCII_OFFSET]);

    uint8_t cols = FONT2_CHARW - gl->first - gl->last;
    while(i < cols) {
        for(j=0; j<FONT2_CHARH; j++) {
            *p = gl->data[i + gl->first] & (1 << j) ? a : b;
            p += w;
        }
        i++;
        p = buf + i;
    }
    return cols;
}

uint8_t* font2_string(const char* str, uint8_t* buf, uint32_t size, uint8_t w, uint8_t a, uint8_t b) {
    uint8_t* max = buf + size - 8;
    while(buf < max) {
        if (*str == 0) break;
        buf += font2_glyph(*str, buf, w, a, b);
        ++buf;
        ++str;
    }
    return buf;
}

void region_string_font2(region* reg, const char* str, uint8_t xoff, uint8_t yoff, uint8_t fg, uint8_t bg) {
    uint8_t* buf = reg->data + xoff + (uint32_t)(reg->w) * (uint32_t)yoff;
    uint8_t* max = reg->data + reg->len;
    uint32_t xmax = reg->w - FONT2_CHARW;
    uint8_t dx = 0;
    
    while(buf < max) {
        if(*str == 0) break;
        dx = font2_glyph(*str, buf, reg->w, fg, bg) + 1;
        buf += dx;
        xoff += dx;
        ++str;
        if(xoff > xmax) return;
    }
    reg->dirty = 1;
}

uint8_t font_string_position(const char* str, uint8_t pos) {
  uint8_t i = 0,n = 0;

  while(i<pos) {
    n+= FONT_CHARW - font_data[str[i] - FONT_ASCII_OFFSET].first - font_data[str[i] - FONT_ASCII_OFFSET].last;

    n++;
    i++;
  }

  return n;
}

uint8_t font_string_pixels(const char* str) {
  uint8_t i = 0,n = 0;

  while(str[i]) {
    n+= FONT_CHARW - font_data[str[i] - FONT_ASCII_OFFSET].first - font_data[str[i] - FONT_ASCII_OFFSET].last;

    n++;
    i++;
  }

  return n;
}

// render a string of packed glyphs to a buffer
uint8_t* font_string(const char* str, uint8_t* buf, uint32_t size, uint8_t w, uint8_t a, uint8_t b) {
  uint8_t* max = buf + size - 8; // pad 1 character width on right edge
  //  uint32_t x = 0;
  //  uint8_t dx = 0;

  while(buf < max) {
  //  while (x < w) {
    if (*str == 0) {
      // end of string
      break;
    }
    //    dx = font_glyph(*str, buf, w, a, b);
    //    buf = +=dx;
    buf += font_glyph(*str, buf, w, a, b);
    //    x += dx;
    // 1-column space between chars
    ++buf;
    //    ++x;
    ++str;
  }
  return buf;
}


// render a font string to a region.
// this allows for smarter bounds handling
void font_string_region_wrap(region* reg, const char* str, uint8_t xoff, uint8_t yoff, uint8_t fg, uint8_t bg) {
  uint8_t* buf = reg->data + xoff + (uint32_t)(reg->w) * (uint32_t)yoff;
  uint8_t* max = reg->data + reg->len;
  uint32_t xmax = reg->w - 7; // padding
  uint8_t dx = 0;
  while(buf < max) {
    // break on end of string
    if(*str == 0) { break; }    
    dx = font_glyph(*str, buf, reg->w, fg, bg) + 1;
    buf += dx;
    xoff += dx;
    ++str;
    // wrap lines
    if(xoff > xmax) { 
      xoff = 0; 
      buf += (reg->w - xoff); 
    //   print_dbg("\r\n font_string_region: wrapped line");
    }
  } 
}

// clipping variant
void font_string_region_clip(region* reg, const char* str, uint8_t xoff, uint8_t yoff, uint8_t fg, uint8_t bg) {
  uint8_t* buf = reg->data + xoff + (uint32_t)(reg->w) * (uint32_t)yoff;
  uint8_t* max = reg->data + reg->len;
  uint32_t xmax = reg->w - 7; // padding
  uint8_t dx = 0;
  while(buf < max) {
    // break on end of string
    if(*str == 0) { break; }    
    dx = font_glyph(*str, buf, reg->w, fg, bg) + 1;
    buf += dx;
    xoff += dx;
    ++str;
    // wrap lines
    if(xoff > xmax) { 
      return; 
    }
  } 
}

// clipping variant
#define TAB_POSITION 48
void font_string_region_clip_tab(region* reg, const char* str, uint8_t xoff, uint8_t yoff, uint8_t fg, uint8_t bg) {
  uint8_t* buf = reg->data + xoff + (uint32_t)(reg->w) * (uint32_t)yoff;
  uint8_t* max = reg->data + reg->len;
  uint32_t xmax = reg->w - 7; // padding
  uint8_t dx = 0;
  while(buf < max) {
    // break on end of string
    if(*str == 0) { break; }
    if(*str == '|') {
      buf = reg->data + TAB_POSITION + (uint32_t)(reg->w) * (uint32_t)yoff;
    }    
    else {
      dx = font_glyph(*str, buf, reg->w, fg, bg) + 1;
      buf += dx;
      xoff += dx;
    }
    ++str;
    // wrap lines
    if(xoff > xmax) { 
      return; 
    }
  } 
}

void font_string_region_clip_right(region* reg, const char* str, uint8_t xoff, uint8_t yoff, uint8_t fg, uint8_t bg) {
  int8_t x = xoff - font_string_pixels(str);
  if(x < 0) x = 0;
  uint8_t* buf = reg->data + x + (uint32_t)(reg->w) * (uint32_t)yoff;
  uint8_t* max = reg->data + reg->len;
  uint32_t xmax = reg->w - 6; // padding changed from 7 to 6 (only using 4 wide nums anyway)
  uint8_t dx = 0;
  while(buf < max) {
    // break on end of string
    if(*str == 0) { break; }    
    dx = font_glyph(*str, buf, reg->w, fg, bg) + 1;
    buf += dx;
    x += dx;
    ++str;
    // wrap lines
    if(x > xmax) { 
      return; 
    }
  } 
}

// clipping variant with hilight
void font_string_region_clip_hi(region* reg, const char* str, uint8_t xoff, uint8_t yoff, uint8_t fg, uint8_t bg, uint8_t hi) {
    font_string_region_clip_hid(reg, str, xoff, yoff, fg, bg, hi, 1);
}

// clipping variant with hilight
void font_string_region_clip_hid(region* reg, const char* str, uint8_t xoff, uint8_t yoff, uint8_t fg, uint8_t bg, uint8_t hi, uint8_t hid) {
  uint8_t* buf = reg->data + xoff + (uint32_t)(reg->w) * (uint32_t)yoff;
  uint8_t* max = reg->data + reg->len;
  uint32_t xmax = reg->w - 7; 
  uint8_t dx = 0;
  uint8_t i = 0;
  while(buf < max) {
    // break on end of string
    if(*str == 0) { break; } 
    if(i == hi) bg += hid;   
    dx = font_glyph(*str, buf, reg->w, fg, bg) + 1;
    if(i == hi) bg -= hid;   
    buf += dx;
    xoff += dx;
    ++str;
    // wrap lines
    if(xoff > xmax) { 
      return; 
    }

    i++;
  } 
}


// same as font_string, double size
uint8_t* font_string_big(const char* str, uint8_t* buf, uint32_t size, uint8_t w, uint8_t a, uint8_t b) {
  uint8_t* max = buf + size;
  while (buf < max) {
    if (*str == 0) {
      // end of string
      break;
    }
    buf = font_glyph_big(*str, buf, w, a, b);
    /* // 1-column space between chars */
    /* buf++; */
    /* str++; */
    // 2-column space between chars
    buf += 2;
    ++str;

  }
  return buf;
}

// same as font_string, 4x size
uint8_t* font_string_bigbig(const char* str, uint8_t* buf, uint32_t size, uint8_t w, uint8_t a, uint8_t b) {
  uint8_t* max = buf + size;
  while (buf < max) {
    if (*str == 0) {
      // end of string
      break;
    }
    buf = font_glyph_bigbig(*str, buf, w, a, b);
    // 1-column space between chars
    //    buf++;
    // 3-column space
    buf += 3;
    str++;
  }
  return buf;
}




/*

//-------------
//----- anti-aliased fonts (bitmaps)

// render an anti-aliased (4-bit) glyph to a buffer
// arguments are character, buffer, target row size, invert flag
extern uint8_t* font_glyph_aa(char ch, uint8_t* buf, uint8_t w, uint8_t inv) {
  //#if 0
  const char* gl; // glyph data
  //  uint8_t gw, gh; // glyph width and height
  uint8_t i, j;
  // how many bytes to move buf pointer for 1st column of next row
  uint32_t nextRowBytes;
    // buf pointer;
  char* p;
  // pointer to copy function
  //  void (*fp)(const char* src, char* dst);
  
  // fixme: wtf why
  //  if(inv) { fp = &copyPxInv; } else { fp = &copyPx; }

#if 0
  /// FIXME: might want only numerals
  //// hackish
  if( (ch > 45) && (ch < 58)) { // dot + numerals
    gl = FONT_AA[ch - 46].glyph.data;
    // print_dbg("\r\n printing numeral ");
    // print_dbg_char(ch);
    // print_dbg(" , glyphidx: ");
    // print_dbg_ulong(ch - 46);
  } else { 
    return buf;
  }
#else
  //  gl = FONT_AA[ch - FONT_ASCII_OFFSET].glyph.data;
  /// flaarggg
  //  print_dbg("\r\n render glyph: ");
  //  print_dbg_char(ch);
  //  print_dbg(" ( 0x");
  //  print_dbg_hex((uint32_t)ch);
  
  ////////
  /// FIXME: font is missing ` or _ or something
  if(ch > 95) { ch--; }
  ////////
  gl = FONT_AA[ch - FONT_ASCII_OFFSET].glyph.data;
#endif
  /// copy glyph to buffer...
  p = (char*)buf;
  nextRowBytes = w - FONT_AA_CHARW;
  //  print_dbg("\r\n");
  //  print_dbg("\r\n");

  if(inv) {
    // loop over rows
    for(i=0; i<FONT_AA_CHARH; i++) {
      // loop over columns
      for(j=0; j<FONT_AA_CHARW; j++) {
	//	print_dbg_char(*gl + 0x20);
	//      print_dbg(dbgStr[(uint32_t)(*gl)]);
	//	print_dbg(" ");
	// copy/invert pixel and advance pointers
	*p++ = 0xf - *gl++;
      }
      //      print_dbg("\r\n");
      // reset column and advance row
      p += nextRowBytes;
    }
    // return original buf pointer plus glyph width
  } else {
    // loop over rows
    for(i=0; i<FONT_AA_CHARH; i++) {
      // loop over columns
      for(j=0; j<FONT_AA_CHARW; j++) {
	//	print_dbg_char(*gl + 0x20);
	//      print_dbg(dbgStr[(uint32_t)(*gl)]);
	//	print_dbg(" ");
	// copy pixel and advance pointers
	*p++ = *gl++;
      }
      //      print_dbg("\r\n");
      // reset column and advance row
      p += nextRowBytes;
    }
  }
  // return original buf pointer plus glyph width
  return buf + FONT_AA_CHARW;
  //#endif
}

// render a string of packed glyphs to a buffer
extern uint8_t* font_string_aa(const char* str, uint8_t* buf, uint32_t size, uint8_t w, uint8_t inv) {
  uint8_t* max = buf + size;
  // print_dbg("\r\n antialiased string \"");
  // print_dbg(str);
  // print_dbg("\" font w, h: (");
  // print_dbg_ulong(FONT_AA_CHARW);
  // print_dbg(" , ");
  // print_dbg_ulong(FONT_AA_CHARH);
  // print_dbg(" ) , buf w: ");
  // print_dbg_ulong(w);

  /// FIXME: this bounds check looks wrong
  while (buf < max) {
    if (*str == 0) {
      // end of string
      break;
    }
    buf = font_glyph_aa(*str, buf, w, inv);
    // 1-column space between chars
    //    buf++;
    //// cutting the fonts with space included
    //// so that background doesn't bleed through here
    str++;
  }
  return buf;  
}

*/
