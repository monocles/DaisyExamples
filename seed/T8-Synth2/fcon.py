import freetype  # Требуется установить: pip install freetype-py
from PIL import Image  # Требуется установить: pip install Pillow
import numpy as np
import sys
import os

GLYPH_SIZE = 18        # Высота шрифта
GLYPH_SHIFT_X = 1      # Отступ слева в 1 пиксель
GLYPH_SHIFT_Y = 1      # Отступ сверху в 1 пиксель
GLYPH_WIDTH = 7        # 5 пикселей + 2 пикселя отступов
GLYPH_HEIGHT = 12      # 10 пикселей + 2 пикселя отступов
GLYPH_CONTENT_WIDTH = 5  # Полезная ширина глифа
GLYPH_CONTENT_HEIGHT = 10  # Полезная высота глифа

def convert_row_to_column(row_data, width=16, height=18):
    column_data = [0] * GLYPH_WIDTH
    content = []
    
    # Проверяем корректность входных данных
    if len(row_data) < height * 2:
        # Дополняем массив нулями если данных недостаточно
        row_data = row_data + [0] * (height * 2 - len(row_data))
    
    # Сначала извлекаем полезное содержимое
    for y in range(height):
        try:
            byte1 = row_data[y * 2]
            byte2 = row_data[y * 2 + 1] if y * 2 + 1 < len(row_data) else 0
        except IndexError:
            byte1, byte2 = 0, 0
            
        row_content = 0
        
        for x in range(16):
            if x < 8:
                if byte1 & (0x80 >> x):
                    row_content |= (1 << (15 - x))
            else:
                if byte2 & (0x80 >> (x-8)):
                    row_content |= (1 << (15 - x))
        content.append(row_content)
    
    # Находим границы полезного содержимого
    top = 0
    bottom = height - 1
    left = width - 1
    right = 0
    
    for y in range(height):
        if content[y] != 0:
            top = y
            break
    
    for y in range(height - 1, -1, -1):
        if content[y] != 0:
            bottom = y
            break
            
    for y in range(height):
        row = content[y]
        if row != 0:
            for x in range(width):
                if row & (1 << (width - 1 - x)):
                    left = min(left, x)
                    right = max(right, x)
    
    # Вычисляем масштаб и смещения для центрирования в области 5x10
    content_width = right - left + 1
    content_height = bottom - top + 1
    
    scale_x = min(GLYPH_CONTENT_WIDTH / content_width, 1.0) if content_width > 0 else 1.0
    scale_y = min(GLYPH_CONTENT_HEIGHT / content_height, 1.0) if content_height > 0 else 1.0
    
    target_width = min(int(content_width * scale_x), GLYPH_CONTENT_WIDTH)
    target_height = min(int(content_height * scale_y), GLYPH_CONTENT_HEIGHT)
    
    x_offset = GLYPH_SHIFT_X + (GLYPH_CONTENT_WIDTH - target_width) // 2
    y_offset = GLYPH_SHIFT_Y + (GLYPH_CONTENT_HEIGHT - target_height) // 2
    
    # Размещаем содержимое в целевой области с учетом отступов
    for y in range(target_height):
        src_y = top + int(y / scale_y)
        for x in range(target_width):
            src_x = left + int(x / scale_x)
            if content[src_y] & (1 << (width - 1 - src_x)):
                # Отражаем по горизонтальной оси (слева направо)
                flipped_x = (GLYPH_WIDTH - 1) - (x + x_offset)
                column_data[flipped_x] |= (1 << (y + y_offset))
    
    return column_data

def process_font_data(font_array):
    result = []
    
    for char_data in font_array:
        col_data = convert_row_to_column(char_data)
        
        # Находим первый непустой столбец
        first = 0
        for i in range(GLYPH_WIDTH):
            if col_data[i] != 0:
                first = i
                break
                
        # Находим последний непустой столбец
        last = GLYPH_WIDTH - 1
        for i in range(GLYPH_WIDTH - 1, -1, -1):
            if col_data[i] != 0:
                last = i
                break
        
        # Вычисляем разницу до правого края
        last = (GLYPH_WIDTH - 1) - last
        
        col_str = ", ".join(f"0x{x:02x}" for x in col_data)
        result.append(f"{{ /* first={first}, last={last} */ {first}, {last}, {{ {col_str} }} }}")
    
    return result

def analyze_font_metrics(font_array):
    max_width = 0
    max_height = len(font_array[0]) if font_array else 0
    
    for char_data in font_array:
        col_data = convert_row_to_column(char_data)
        
        last_used = 0
        for i in range(GLYPH_WIDTH - 1, -1, -1):
            if col_data[i] != 0:
                last_used = i + 1
                break
        max_width = max(max_width, last_used)
    
    return max_width, max_height

BOTTOM_MARGIN = 1

def visualize_glyph(col_data):
    result = []
    for y in range(GLYPH_HEIGHT - BOTTOM_MARGIN):
        row = ""
        for x in range(len(col_data)):
            if col_data[x] & (1 << y):
                row += "█"
            else:
                row += "·"
        result.append(row)
    return result

def print_all_glyphs(converted_data):
    print("\n// Visual representation of all glyphs:")
    print("// ASCII codes from 0x20 to 0x7E")
    print("// Verification of character positions:")
    
    for i, glyph_data in enumerate(converted_data):
        expected_char = chr(i + 0x20)
        
        col_str = glyph_data.split("{")[-1].split("}")[0].strip()
        cols = [int(x, 16) for x in col_str.split(",")]
        
        char = expected_char
        if char in ' \t\n\r':
            char = '␣'
            
        print(f"\n// Char: '{char}' (0x{i + 0x20:02X})")
        for line in visualize_glyph(cols):
            print("// " + line)

def parse_input_data(input_str):
    input_str = input_str.replace('\n', ' ').replace('\t', ' ')
    
    data_str = input_str[input_str.find('{')+1:input_str.rfind('}')].strip()
    
    char_arrays = []
    current_array = []
    
    arrays = data_str.split('},')
    
    for array in arrays:
        if not array.strip():
            continue
            
        array = array.split('/*')[0]
        values = []
        for item in array.split(','):
            item = item.strip('{ }').strip()
            if item.startswith('0x'):
                try:
                    values.append(int(item, 16))
                except ValueError:
                    continue
                    
        if values:
            char_arrays.append(values)

    expected_chars = ord('~') - ord(' ') + 1
    if len(char_arrays) != expected_chars:
        print(f"Warning: Expected {expected_chars} characters, got {len(char_arrays)}")
        missing = []
        for i in range(expected_chars):
            if i >= len(char_arrays):
                missing.append(f"'{chr(i + ord(' '))}' (0x{i + 0x20:02X})")
        if missing:
            print(f"Missing characters: {', '.join(missing)}")
    
    # После парсинга проверяем количество символов
    if len(char_arrays) < expected_chars:
        # Дополняем пустыми символами если не хватает
        empty_char = [0] * 36  # 18 rows * 2 bytes per row
        while len(char_arrays) < expected_chars:
            char_arrays.append(empty_char[:])
            
    return char_arrays

def load_char_from_otf(face, char_code, width=8, height=8):
    face.set_char_size(width=8*66, height=8*64, hres=72, vres=72)
    
    flags = (freetype.FT_LOAD_RENDER | 
            freetype.FT_LOAD_TARGET_MONO |
            freetype.FT_LOAD_MONOCHROME)
    
    face.load_char(chr(char_code), flags)
    bitmap = face.glyph.bitmap
    
    result = [0] * 10
    
    if bitmap.width > 0 and bitmap.rows > 0:
        x_offset = max(0, (GLYPH_WIDTH - bitmap.width) // 2 + GLYPH_SHIFT_X)
        
        available_height = GLYPH_HEIGHT
        bitmap_height = min(bitmap.rows, available_height - GLYPH_SHIFT_Y)
        y_offset = GLYPH_SHIFT_Y
        
        for y in range(bitmap_height):
            byte = 0
            for x in range(min(bitmap.width, 8)):
                byte_index = y * bitmap.pitch + (x // 8)
                if byte_index < len(bitmap.buffer):
                    pixel = (bitmap.buffer[byte_index] & (0x80 >> (x % 8))) != 0
                    if pixel:
                        target_x = (8 - (x + x_offset) - 1)
                        if 0 <= target_x < 8:
                            byte |= (0x80 >> target_x)
            
            target_y = y + y_offset
            if 0 <= target_y < 10:
                result[target_y] = byte
    
    return result

def generate_font_from_otf(font_path, size_px=8):
    try:
        face = freetype.Face(font_path)
        face.set_pixel_sizes(0, 16)
        
        font_data = []
        for char_code in range(0x20, 0x7F):
            char_data = load_char_from_otf(face, char_code)
            font_data.append(char_data)
        
        return font_data
        
    except Exception as e:
        print(f"Error in generate_font_from_otf: {e}")
        return None

def convert_otf_to_font_data(otf_path):
    print(f"// Converting font from: {otf_path}")
    
    try:
        otf_path = os.path.abspath(otf_path)
        if not os.path.exists(otf_path):
            raise FileNotFoundError(f"Font file not found: {otf_path}")
            
        font_data = generate_font_from_otf(otf_path)
        if not font_data:
            raise ValueError("Failed to generate font data")
            
        converted = process_font_data(font_data)
        max_width, max_height = analyze_font_metrics(font_data)
        
        print(f"\n// Font metrics for font.h:")
        print(f"#define FONT_CHARW {max_width}")
        print(f"#define FONT_CHARH {max_height}")
        
        print("\nconst glyph_t font_data[] = {")
        for line in converted:
            print(f"    {line},")
        print("};")
        
        print_all_glyphs(converted)
        
    except Exception as e:
        print(f"Error converting font: {str(e)}")
        import traceback
        traceback.print_exc()

input_str = """
{
{
{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x08,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x12,0x00,0x12,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,0x00,0x14,0x00,0x3E,0x00,0x14,0x00,0x3E,0x00,0x14,0x00,0x14,0x00,0x00,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x3C,0x00,0x0A,0x00,0x0A,0x00,0x1C,0x00,0x28,0x00,0x28,0x00,0x28,0x00,0x1E,0x00,0x08,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x26,0x00,0x26,0x00,0x10,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x04,0x00,0x32,0x00,0x32,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x12,0x00,0x12,0x00,0x0C,0x00,0x04,0x00,0x2A,0x00,0x12,0x00,0x12,0x00,0x2C,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x08,0x00,0x10,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x08,0x00,0x04,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x2A,0x00,0x1C,0x00,0x1C,0x00,0x2A,0x00,0x08,0x00,0x00,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x08,0x00,0x3E,0x00,0x08,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x18,0x00,0x0C,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x18,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x20,0x00,0x10,0x00,0x10,0x00,0x08,0x00,0x08,0x00,0x04,0x00,0x04,0x00,0x02,0x00,0x02,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x22,0x00,0x32,0x00,0x32,0x00,0x2A,0x00,0x26,0x00,0x26,0x00,0x22,0x00,0x1C,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x0C,0x00,0x0A,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x3E,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x22,0x00,0x22,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x02,0x00,0x02,0x00,0x3E,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x1E,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x1E,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x3C,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x1E,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x1E,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x1A,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x1C,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x00,0x20,0x00,0x20,0x00,0x10,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x1C,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x1C,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x3C,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x1E,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x18,0x00,0x00,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x18,0x00,0x0C,0x00,0x04,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x30,0x00,0x18,0x00,0x0C,0x00,0x06,0x00,0x06,0x00,0x0C,0x00,0x18,0x00,0x30,0x00,0x20,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x06,0x00,0x0C,0x00,0x18,0x00,0x30,0x00,0x30,0x00,0x18,0x00,0x0C,0x00,0x06,0x00,0x02,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x22,0x00,0x22,0x00,0x10,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x08,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x22,0x00,0x3A,0x00,0x2A,0x00,0x2A,0x00,0x3A,0x00,0x02,0x00,0x22,0x00,0x1C,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x3E,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x1E,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x1E,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x22,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x22,0x00,0x1C,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x1E,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x1E,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x3E,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x1E,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x22,0x00,0x02,0x00,0x02,0x00,0x3A,0x00,0x22,0x00,0x22,0x00,0x32,0x00,0x2C,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x3E,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x3E,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x24,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x22,0x00,0x1C,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x00,0x12,0x00,0x0A,0x00,0x06,0x00,0x06,0x00,0x0A,0x00,0x12,0x00,0x22,0x00,0x22,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x3E,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x00,0x36,0x00,0x3E,0x00,0x2A,0x00,0x2A,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x00,0x26,0x00,0x2A,0x00,0x32,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x1C,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x1E,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x2A,0x00,0x32,0x00,0x1C,0x00,0x10,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x1E,0x00,0x0A,0x00,0x12,0x00,0x12,0x00,0x22,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x1C,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x1E,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x1C,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x14,0x00,0x08,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x2A,0x00,0x2A,0x00,0x3E,0x00,0x36,0x00,0x22,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x14,0x00,0x08,0x00,0x14,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x22,0x00,0x14,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x00,0x20,0x00,0x10,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x04,0x00,0x02,0x00,0x3E,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x1C,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x02,0x00,0x04,0x00,0x04,0x00,0x08,0x00,0x08,0x00,0x10,0x00,0x10,0x00,0x20,0x00,0x20,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x1C,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x1C,0x00,0x36,0x00,0x22,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x00 
}"""

input_data = parse_input_data(input_str)

converted = process_font_data(input_data)

max_width, max_height = analyze_font_metrics(input_data)

print(f"\n// Font metrics for font.h:")
print(f"#define FONT_CHARW {max_width}")
print(f"#define FONT_CHARH {max_height}")

print("\nconst glyph_t font_data[] = {")
for line in converted:
    print("    " + line + ",")
print("};")

print_all_glyphs(converted)

if __name__ == "__main__":
    if len(sys.argv) > 1:
        otf_path = sys.argv[1]
        print(f"Converting OTF font: {otf_path}")
        try:
            convert_otf_to_font_data(otf_path)
        except Exception as e:
            print(f"Error converting font: {e}")
            sys.exit(1)
    else:
        print("Using built-in font data")
        input_data = parse_input_data(input_str)
        converted = process_font_data(input_data)
        max_width, max_height = analyze_font_metrics(input_data)
        
        print(f"\n// Font metrics for font.h:")
        print(f"#define FONT_CHARW {max_width}")
        print(f"#define FONT_CHARH {max_height}")
        
        print("\nconst glyph_t font_data[] = {")
        for line in converted:
            print("    " + line + ",")
        print("};")
        print_all_glyphs(converted)